{% comment %}
  Discount Pop-up App Embed Block
  This creates a customizable pop-up for collecting emails/phones and offering discounts
{% endcomment %}

<style>
  .popup-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 9999;
    display: none;
    justify-content: center;
    align-items: center;
  }

  .popup-overlay.show {
    display: flex;
  }

  .popup-container {
    background: {{ block.settings.background_color | default: '#ffffff' }};
    color: {{ block.settings.text_color | default: '#333333' }};
    border-radius: 12px;
    padding: 30px;
    max-width: 400px;
    width: 90%;
    position: relative;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    animation: popupSlideIn 0.3s ease-out;
  }

  .popup-container.position-right {
    position: fixed;
    right: 20px;
    top: 50%;
    transform: translateY(-50%);
  }

  .popup-container.position-left {
    position: fixed;
    left: 20px;
    top: 50%;
    transform: translateY(-50%);
  }

  .popup-container.position-bottom-right {
    position: fixed;
    right: 20px;
    bottom: 20px;
    transform: none;
  }

  @keyframes popupSlideIn {
    from {
      opacity: 0;
      transform: scale(0.8);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .popup-close {
    position: absolute;
    top: 15px;
    right: 15px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: {{ block.settings.text_color | default: '#333333' }};
    opacity: 0.7;
  }

  .popup-close:hover {
    opacity: 1;
  }

  .popup-title {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 10px;
    text-align: center;
  }

  .popup-description {
    font-size: 16px;
    margin-bottom: 20px;
    text-align: center;
    line-height: 1.5;
  }

  .popup-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .popup-input {
    padding: 12px;
    border: 2px solid #e0e0e0;
    border-radius: 6px;
    font-size: 16px;
    transition: border-color 0.3s;
  }

  .popup-input:focus {
    outline: none;
    border-color: {{ block.settings.button_color | default: '#007cba' }};
  }

  .popup-submit {
    background: {{ block.settings.button_color | default: '#007cba' }};
    color: white;
    border: none;
    padding: 12px 20px;
    border-radius: 6px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s;
  }

  .popup-submit:hover {
    opacity: 0.9;
  }

  .popup-submit:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .popup-success {
    text-align: center;
    padding: 20px;
  }

  .popup-success h3 {
    color: #28a745;
    margin-bottom: 10px;
  }

  .discount-code {
    background: #f8f9fa;
    border: 2px dashed {{ block.settings.button_color | default: '#007cba' }};
    padding: 15px;
    border-radius: 6px;
    font-size: 18px;
    font-weight: bold;
    text-align: center;
    margin: 15px 0;
    letter-spacing: 2px;
  }

  @media (max-width: 480px) {
    .popup-container {
      padding: 20px;
      margin: 20px;
    }
    
    .popup-title {
      font-size: 20px;
    }
    
    .popup-description {
      font-size: 14px;
    }
  }
</style>

{% if block.settings.popup_enabled %}
<div id="discount-popup-{{ block.id }}" class="popup-overlay">
  <div class="popup-container position-center" id="popup-container-{{ block.id }}">
    <button class="popup-close" onclick="closePopup('{{ block.id }}')">&times;</button>
    
    <div id="popup-form-{{ block.id }}">
      <h2 class="popup-title" id="popup-title-{{ block.id }}">Get 10% Off Your First Order!</h2>
      <p class="popup-description" id="popup-description-{{ block.id }}">Enter your email to receive an exclusive discount code</p>
      
      <form class="popup-form" onsubmit="submitPopupForm(event, '{{ block.id }}')">
        <input type="email" class="popup-input" placeholder="Enter your email address" required id="popup-email-{{ block.id }}">
        <input type="tel" class="popup-input" placeholder="Phone number (optional)" id="popup-phone-{{ block.id }}">
        <button type="submit" class="popup-submit" id="popup-submit-{{ block.id }}">
          Get 10% Discount
        </button>
      </form>
    </div>
    
    <div id="popup-success-{{ block.id }}" class="popup-success" style="display: none;">
      <h3>üéâ Success!</h3>
      <p>Your discount code is:</p>
      <div class="discount-code" id="discount-code-{{ block.id }}"></div>
      <p id="popup-success-text-{{ block.id }}">Use this code at checkout to save 10%!</p>
      <button class="popup-submit" onclick="closePopup('{{ block.id }}')">Start Shopping</button>
    </div>
  </div>
</div>

<script>
  (function() {
    const blockId = '{{ block.id }}';
    
    // üìä ANALYTICS TRACKING - Generate unique session ID
    let sessionId = sessionStorage.getItem('popup_session_id');
    if (!sessionId) {
      sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
      sessionStorage.setItem('popup_session_id', sessionId);
    }
    
    // üöÄ DYNAMIC SETTINGS - Fetch from app database
    let popupSettings = {
      isEnabled: {{ block.settings.popup_enabled | default: true }},
      title: '{{ block.settings.popup_title | default: "Get 10% Off Your First Order!" }}',
      description: '{{ block.settings.popup_description | default: "Enter your email to receive an exclusive discount code" }}',
      discountPercentage: {{ block.settings.discount_percentage | default: 10 }},
      position: '{{ block.settings.popup_position | default: "center" }}',
      triggerType: '{{ block.settings.trigger_type | default: "page_load" }}',
      delaySeconds: {{ block.settings.delay_seconds | default: 5 }},
      frequency: '{{ block.settings.popup_frequency | default: "once_per_session" }}',
      backgroundColor: '{{ block.settings.background_color | default: "#ffffff" }}',
      textColor: '{{ block.settings.text_color | default: "#333333" }}',
      buttonColor: '{{ block.settings.button_color | default: "#007cba" }}'
    };
    
    // üìä Track page visit immediately
    trackAnalyticsEvent('visit');
    
    // üîÑ Fetch dynamic settings from app database
    async function loadDynamicSettings() {
      try {
        console.log('üîÑ Loading dynamic popup settings from app...');
        const shopDomain = window.Shopify?.shop || window.location.hostname;
        
        // Get current development server port from terminal output
        const currentDevPort = getCurrentDevPort();
        
        // Try multiple endpoints to find the working API
        const apiEndpoints = [
          // Try the tunnel URL first (for production/live store)
          'https://asian-replied-thanks-tee.trycloudflare.com/api/popup-settings',
          // Try current development server port
          `http://localhost:${currentDevPort}/api/popup-settings`,
          // Try common development ports as fallback
          'http://localhost:62396/api/popup-settings',
          'http://localhost:3000/api/popup-settings',
          'http://localhost:8000/api/popup-settings'
        ];
        
        for (const endpoint of apiEndpoints) {
          try {
            console.log('üîÑ Trying API endpoint:', endpoint);
            const response = await fetch(endpoint, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
                'X-Shopify-Shop-Domain': shopDomain,
              }
            });
            
            if (response.ok) {
              const data = await response.json();
              if (data.success && data.settings) {
                console.log('‚úÖ Dynamic settings loaded from:', endpoint);
                console.log('üìã Settings:', data.settings);
                popupSettings = { ...popupSettings, ...data.settings };
                
                // Update popup content with dynamic settings
                updatePopupContent();
                return true;
              }
            }
          } catch (error) {
            console.log('‚ùå Failed to connect to:', endpoint, error.message);
          }
        }
        
        console.log('‚ö†Ô∏è All API endpoints failed, using fallback static settings');
        console.log('üìã Current static settings:', popupSettings);
        return false;
      } catch (error) {
        console.log('‚ö†Ô∏è Failed to load dynamic settings, using static:', error);
        return false;
      }
    }
    
    // Get current development port (updated by port updater)
    function getCurrentDevPort() {
      // This will be updated by the port updater script
      return 62396;
    }
    
    // üìä ANALYTICS TRACKING FUNCTIONS
    async function trackAnalyticsEvent(eventType, additionalData = {}) {
      try {
        const shopDomain = window.Shopify?.shop || window.location.hostname;
        const analyticsData = {
          shopDomain,
          eventType,
          blockId,
          sessionId,
          userAgent: navigator.userAgent,
          ipAddress: null, // Will be determined server-side
          referrer: document.referrer || null,
          pageUrl: window.location.href,
          ...additionalData
        };
        
        console.log('üìä Tracking analytics event:', eventType, analyticsData);
        
        const currentDevPort = getCurrentDevPort();
        
        // Try multiple endpoints for analytics tracking
        const analyticsEndpoints = [
          'https://asian-replied-thanks-tee.trycloudflare.com/api/analytics',
          `http://localhost:${currentDevPort}/api/analytics`,
          'http://localhost:62396/api/analytics',
          'http://localhost:3000/api/analytics'
        ];
        
        for (const endpoint of analyticsEndpoints) {
          try {
            const response = await fetch(endpoint, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(analyticsData)
            });
            
            if (response.ok) {
              const result = await response.json();
              console.log('‚úÖ Analytics event tracked:', eventType, result.eventId);
              return true;
            }
          } catch (error) {
            console.log('‚ùå Analytics endpoint failed:', endpoint, error.message);
          }
        }
        
        console.log('‚ö†Ô∏è All analytics endpoints failed for event:', eventType);
        return false;
      } catch (error) {
        console.log('‚ö†Ô∏è Analytics tracking error:', error);
        return false;
      }
    }
    
    // üé® Update popup content with dynamic settings
    function updatePopupContent() {
      const popup = document.getElementById('discount-popup-' + blockId);
      if (!popup) return;
      
      // Update title
      const titleElement = document.getElementById('popup-title-' + blockId);
      if (titleElement) titleElement.textContent = popupSettings.title;
      
      // Update description
      const descElement = document.getElementById('popup-description-' + blockId);
      if (descElement) descElement.textContent = popupSettings.description;
      
      // Update button text
      const buttonElement = document.getElementById('popup-submit-' + blockId);
      if (buttonElement) buttonElement.textContent = `Get ${popupSettings.discountPercentage}% Discount`;
      
      // Update colors and position
      const container = document.getElementById('popup-container-' + blockId);
      if (container) {
        container.style.backgroundColor = popupSettings.backgroundColor;
        container.style.color = popupSettings.textColor;
        
        // Update position class
        container.className = `popup-container position-${popupSettings.position}`;
      }
      
      if (buttonElement) {
        buttonElement.style.backgroundColor = popupSettings.buttonColor;
      }
      
      // Update success message
      const successTextElement = document.getElementById('popup-success-text-' + blockId);
      if (successTextElement) {
        successTextElement.textContent = `Use this code at checkout to save ${popupSettings.discountPercentage}%!`;
      }
      
      console.log('üé® Popup content updated with dynamic settings:', {
        title: popupSettings.title,
        discount: popupSettings.discountPercentage,
        position: popupSettings.position,
        colors: {
          background: popupSettings.backgroundColor,
          text: popupSettings.textColor,
          button: popupSettings.buttonColor
        }
      });
    }
    
    // Check if popup should be shown based on frequency
    function shouldShowPopup() {
      const storageKey = 'popup_shown_' + blockId;
      const now = new Date().getTime();
      const currentFrequency = popupSettings.frequency;
      
      switch(currentFrequency) {
        case 'once_per_session':
          return !sessionStorage.getItem(storageKey);
        case 'once_per_day':
          const lastShown = localStorage.getItem(storageKey);
          if (!lastShown) return true;
          return now - parseInt(lastShown) > 24 * 60 * 60 * 1000;
        case 'once_per_week':
          const lastShownWeek = localStorage.getItem(storageKey);
          if (!lastShownWeek) return true;
          return now - parseInt(lastShownWeek) > 7 * 24 * 60 * 60 * 1000;
        case 'every_visit':
          return true;
        default:
          return true;
      }
    }
    
    // Mark popup as shown
    function markPopupShown() {
      const storageKey = 'popup_shown_' + blockId;
      const now = new Date().getTime();
      const currentFrequency = popupSettings.frequency;
      
      if (currentFrequency === 'once_per_session') {
        sessionStorage.setItem(storageKey, 'true');
      } else {
        localStorage.setItem(storageKey, now.toString());
      }
    }
    
    // Show popup
    function showPopup() {
      if (!shouldShowPopup()) {
        console.log('üö´ Popup not shown due to frequency settings');
        return;
      }
      
      const popup = document.getElementById('discount-popup-' + blockId);
      if (popup) {
        console.log('üéâ Showing popup!');
        popup.classList.add('show');
        markPopupShown();
        
        // üìä Track popup view analytics
        trackAnalyticsEvent('popup_view');
        
        // Track popup view (legacy Google Analytics)
        if (typeof gtag !== 'undefined') {
          gtag('event', 'popup_view', {
            'event_category': 'discount_popup',
            'event_label': blockId
          });
        }
      } else {
        console.log('‚ùå Popup element not found');
      }
    }
    
    // Initialize popup based on trigger type
    function initPopup() {
      console.log('üöÄ Initializing popup with settings:', popupSettings);
      
      // Use current popupSettings values (may have been updated by loadDynamicSettings)
      const currentTriggerType = popupSettings.triggerType;
      const currentDelaySeconds = popupSettings.delaySeconds;
      
      console.log(`üéØ Trigger: ${currentTriggerType}, Delay: ${currentDelaySeconds}s`);
      
      switch(currentTriggerType) {
        case 'page_load':
          console.log(`‚è∞ Setting page load trigger with ${currentDelaySeconds}s delay`);
          setTimeout(showPopup, currentDelaySeconds * 1000);
          break;
        case 'exit_intent':
          console.log('üñ±Ô∏è Setting exit intent trigger');
          document.addEventListener('mouseleave', function(e) {
            if (e.clientY <= 0) {
              showPopup();
            }
          });
          break;
        case 'time_delay':
          console.log(`‚è∞ Setting time delay trigger with ${currentDelaySeconds}s delay`);
          setTimeout(showPopup, currentDelaySeconds * 1000);
          break;
        case 'scroll':
          console.log('üìú Setting scroll trigger');
          let scrollTriggered = false;
          window.addEventListener('scroll', function() {
            if (!scrollTriggered && window.scrollY > 300) {
              scrollTriggered = true;
              showPopup();
            }
          });
          break;
        default:
          console.log('‚è∞ Using default page load trigger');
          setTimeout(showPopup, 5000);
      }
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', async function() {
        console.log('üìÑ DOM loaded, initializing popup...');
        await loadDynamicSettings();
        initPopup();
      });
    } else {
      console.log('üìÑ DOM already loaded, initializing popup...');
      loadDynamicSettings().then(() => {
        initPopup();
      });
    }
  })();
  
  // Global functions for form handling
  window.closePopup = function(blockId) {
    const popup = document.getElementById('discount-popup-' + blockId);
    if (popup) {
      popup.classList.remove('show');
      console.log('‚ùå Popup closed');
    }
  };
  
  window.submitPopupForm = function(event, blockId) {
    event.preventDefault();
    
    const email = document.getElementById('popup-email-' + blockId).value;
    const phone = document.getElementById('popup-phone-' + blockId).value;
    const submitBtn = document.getElementById('popup-submit-' + blockId);
    
    console.log('üìß Form submitted:', { email, phone });
    
    // Disable submit button
    submitBtn.disabled = true;
    submitBtn.textContent = 'Processing...';
    
    // Generate temporary discount code for immediate display
    const timestamp = Date.now().toString(36).toUpperCase().replace(/[^A-Z0-9]/g, '');
    const random = Math.random().toString(36).substr(2, 4).toUpperCase().replace(/[^A-Z0-9]/g, '');
    const paddedRandom = (random + '0000').substr(0, 4);
    const tempDiscountCode = `POPUP-${timestamp}-${paddedRandom}`.replace(/[^A-Z0-9\-_]/g, '');
    
    // Show success message immediately with temporary code
    document.getElementById('popup-form-' + blockId).style.display = 'none';
    document.getElementById('popup-success-' + blockId).style.display = 'block';
    document.getElementById('discount-code-' + blockId).textContent = tempDiscountCode;
    
    console.log('üéüÔ∏è Generated discount code:', tempDiscountCode);
    
    // Send data to API
    const shopDomain = window.Shopify?.shop || window.location.hostname;
    const apiData = {
      email: email,
      phone: phone,
      discount_code: tempDiscountCode,
      block_id: blockId
    };
    
    // Try API call
    async function tryApiCall() {
      const currentDevPort = 62396; // Current development server port
      
      const apiEndpoints = [
        'https://asian-replied-thanks-tee.trycloudflare.com/api/subscribe',
        `http://localhost:${currentDevPort}/api/subscribe`,
        'http://localhost:62396/api/subscribe',
        '/api/subscribe'
      ];
      
      for (const endpoint of apiEndpoints) {
        try {
          console.log('üîÑ Trying API endpoint:', endpoint);
          const response = await fetch(endpoint, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Shopify-Shop-Domain': shopDomain,
              'Accept': 'application/json'
            },
            body: JSON.stringify(apiData)
          });
          
          if (response.ok) {
            const result = await response.json();
            console.log('‚úÖ SUCCESS! User data stored:', result);
            
            // Update with real discount code if provided
            if (result.discount_code && result.discount_code !== tempDiscountCode) {
              console.log('üéüÔ∏è Updating with real Shopify discount code:', result.discount_code);
              document.getElementById('discount-code-' + blockId).textContent = result.discount_code;
            }
            
            return true;
          } else {
            console.log('‚ùå API endpoint failed:', endpoint, response.status);
          }
        } catch (error) {
          console.log('‚ùå API endpoint error:', endpoint, error.message);
        }
      }
      
      console.log('‚ö†Ô∏è All API endpoints failed - popup still works but data not stored');
      return false;
    }
    
    // Call the API
    tryApiCall();
  };
</script>
{% endif %}

{% schema %}
{
  "name": "Discount Pop-up",
  "target": "body",
  "settings": [
    {
      "type": "checkbox",
      "id": "popup_enabled",
      "label": "Enable Pop-up",
      "default": true
    },
    {
      "type": "text",
      "id": "popup_title",
      "label": "Pop-up Title",
      "default": "Get 10% Off Your First Order!"
    },
    {
      "type": "textarea",
      "id": "popup_description",
      "label": "Pop-up Description",
      "default": "Enter your email to receive an exclusive discount code"
    },
    {
      "type": "range",
      "id": "discount_percentage",
      "label": "Discount Percentage",
      "min": 1,
      "max": 50,
      "step": 1,
      "default": 10
    },
    {
      "type": "select",
      "id": "popup_position",
      "label": "Pop-up Position",
      "options": [
        { "value": "center", "label": "Center" },
        { "value": "right", "label": "Right Side" },
        { "value": "left", "label": "Left Side" },
        { "value": "bottom-right", "label": "Bottom Right" }
      ],
      "default": "center"
    },
    {
      "type": "select",
      "id": "trigger_type",
      "label": "Trigger Type",
      "options": [
        { "value": "page_load", "label": "On Page Load" },
        { "value": "exit_intent", "label": "On Exit Intent" },
        { "value": "time_delay", "label": "After Time Delay" },
        { "value": "scroll", "label": "On Scroll" }
      ],
      "default": "page_load"
    },
    {
      "type": "range",
      "id": "delay_seconds",
      "label": "Delay (seconds)",
      "min": 1,
      "max": 60,
      "step": 1,
      "default": 5
    },
    {
      "type": "select",
      "id": "popup_frequency",
      "label": "Pop-up Frequency",
      "options": [
        { "value": "once_per_session", "label": "Once per session" },
        { "value": "once_per_day", "label": "Once per day" },
        { "value": "every_visit", "label": "Every visit" },
        { "value": "once_per_week", "label": "Once per week" }
      ],
      "default": "once_per_session"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "button_color",
      "label": "Button Color",
      "default": "#007cba"
    }
  ]
}
{% endschema %}